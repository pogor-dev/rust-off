Comment "% LITERAL STRINGS %"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 1"
Eol "\n"
Eol "\n"
Literal { kind: LiteralString } "(This is a string)"
Eol "\n"
Literal { kind: LiteralString } "(Strings can contain newlines \n\\and such.)"
Eol "\n"
Literal { kind: LiteralString } "(Strings can contain balanced parentheses () \nand special characters ( * ! & } ^ %and so on) .)"
Eol "\n"
Literal { kind: LiteralString } "(The following is an empty string .)"
Eol "\n"
Literal { kind: LiteralString } "()"
Eol "\n"
Literal { kind: LiteralString } "(It has zero (0) length.)"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 2"
Eol "\n"
Eol "\n"
Literal { kind: LiteralString } "(These \\\ntwo strings \\\nare the same.)"
Eol "\n"
Literal { kind: LiteralString } "(These two strings are the same.)"
Eol "\n"
Literal { kind: LiteralString } "(This string has an end-of-line at the end of it.\n)"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 3"
Eol "\n"
Eol "\n"
Literal { kind: LiteralString } "(So does this one.\\n)"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 4"
Eol "\n"
Eol "\n"
Literal { kind: LiteralString } "(This string contains \\245two octal characters\\307.)"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 5"
Eol "\n"
Eol "\n"
Literal { kind: LiteralString } "(\\0053)"
Eol "\n"
Literal { kind: LiteralString } "(\\053)"
Eol "\n"
Literal { kind: LiteralString } "(\\53)"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 6"
Eol "\n"
Eol "\n"
Literal { kind: LiteralString } "(\n)"
Eol "\n"
Eol "\n"
Comment "% HEX STRINGS %"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 1"
Eol "\n"
Literal { kind: HexString } "<4E6F762073686D6F7A206B6120706F702E>"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 2"
Eol "\n"
Literal { kind: HexString } "<901FA3>"
Eol "\n"
Literal { kind: HexString } "<901FA>"
Eol "\n"
Eol "\n"
Comment "% EXAMPLE 3"
Eol "\n"
Literal { kind: HexString } "<90\\u{00} 1F\n A3\t\\u{0c}>"
