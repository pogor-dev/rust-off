// PDF Un-Grammar.
//
// This grammar specifies the structure of PDF's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- keyword or punct token (terminal)
//   '#ident'    -- generic token (terminal)
//   '@ident'    -- literal token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

Expr = Literal
  | ArrayExpr
  | DictionaryExpr
  | ObjectExpr
  | IndirectReferenceExpr

ArrayExpr =
  '[' 
  Expr*
  ']'

DictionaryItemExpr =
  DictionaryItemKeyExpr
  DictionaryItemValueExpr

DictionaryItemKeyExpr =
  Literal

DictionaryItemValueExpr =
  Expr

DictionaryExpr =
  '<<'
  DictionaryItemExpr*
  '>>'

Literal =
  value:(
    '@int_number' | '@real_number'
  | '@literal_string' | '@hex_string'
  | '@name' | 'null'
  | 'true' | 'false'
  )

//*************************//
//        Objects          //
//*************************//

ObjectExpr =
  ObjectId
  data:Expr
  'endobj'

ObjectId =
 object_number:Literal generation_number:Literal 'obj'

IndirectReferenceExpr =
  object_number:Literal generation_number:Literal 'R'

//*************************//
//          Items          //
//*************************//

SourceFile =
  Body
  Trailer

Body =
  ObjectExpr*

Trailer =
  'trailer' DictionaryExpr
  'startxref' Literal

//*************************//
//         Streams         //
//*************************//

StreamExpr =
  DictionaryExpr
  'stream'
  '#stream_data' // Raw binary or ASCII data
  'endstream'

//*************************//
//        Cross-Ref        //
//*************************//

XRefTable =
  XRefSection*

XRefSection =
  'xref'
  XRefSubsection*

XRefSubsection =
  first_object:Literal count:Literal
  XRefEntry*

XRefEntry =
  offset:Literal generation_number:Literal free_or_used:XRefEntryType

XRefEntryType = 'f' | 'n'

//*************************//
//        Operators        //
//*************************//

// OperatorExpr =
//   Operand*
//   Operator

// Operand =
//   Literal | IndirectReferenceExpr | ArrayExpr | DictionaryExpr

// Operator =
//   // Path-painting operators
//   'b'  | 'B'  | 'b*'  | 'B*'  
//   // Marked-content, inline image, text, and compatibility operators
//   | 'BDC' | 'BI' | 'BMC' | 'BT' | 'BX'  
//   // Path construction and graphics state operators
//   | 'c'  | 'cm'  
//   // Additional operators
//   | 'CS' | 'cs' | 'd' | 'd0' | 'd1' | 'Do' | 'DP' | 'EI' | 'EMC' | 'ET' | 'EX'  
//   // Additional operators
//   | 'f' | 'F' | 'f*' | 'G' | 'g' | 'gs' | 'h' | 'i' | 'ID' | 'j' | 'J' | 'K'  
//   // Additional operators
//   | 'k' | 'l' | 'm' | 'M' | 'MP' | 'n' | 'q' | 'Q' | 're' | 'RG' | 'rg' | 'ri'  
//   // Additional operators
//   | 's' | 'S' | 'SC' | 'sc' | 'SCN' | 'scn' | 'sh' | 'T*' | 'Tc'  
//   // Additional operators
//   | 'Td' | 'TD' | 'Tf' | 'Tj' | 'TJ' | 'TL' | 'Tm' | 'Tr' | 'Ts' | 'Tw' | 'Tz'  
//   // Additional operators
//   | 'v' | 'w' | 'W' | 'W*' | 'y' | '\'' | '"'  
//   // Arithmetic operators
//   | 'abs' | 'cvi' | 'floor' | 'mod' | 'add' | 'atan' | 'ceiling' | 'cos'  
//   // Relational, boolean, and bitwise operators
//   | 'and' | 'cvr' | 'div' | 'exp' | 'false' | 'idiv' | 'ln' | 'log' | 'le' | 'mul' | 'neg' | 'round' | 'not' | 'sin' | 'sqrt' | 'sub' | 'truncate' | 'true' | 'bitshift' | 'eq'  
//   // Conditional operators
//   | 'If' | 'ge' | 'gt' | 'ifelse' | 'lt' | 'ne' | 'or' | 'xor'  
//   // Stack operators
//   | 'copy' | 'exch' | 'pop' | 'dup' | 'index' | 'roll'  
