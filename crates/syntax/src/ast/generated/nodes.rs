//! Generated by `cargo xtask codegen grammar`, do not edit by hand.

#![allow(non_snake_case)]
use crate::{
    ast::{self, support, AstChildren, AstNode},
    SyntaxKind::{self, *},
    SyntaxNode, SyntaxToken, T,
};

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ArrayExpr {
    pub(crate) syntax: SyntaxNode,
}
impl ArrayExpr {
    #[inline]
    pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }
    #[inline]
    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }
    #[inline]
    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Body {
    pub(crate) syntax: SyntaxNode,
}
impl Body {
    #[inline]
    pub fn object_exprs(&self) -> AstChildren<ObjectExpr> { support::children(&self.syntax) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct DictionaryExpr {
    pub(crate) syntax: SyntaxNode,
}
impl DictionaryExpr {
    #[inline]
    pub fn dictionary_item_exprs(&self) -> AstChildren<DictionaryItemExpr> { support::children(&self.syntax) }
    #[inline]
    pub fn l_dict_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<<]) }
    #[inline]
    pub fn r_dict_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>>]) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct DictionaryItemExpr {
    pub(crate) syntax: SyntaxNode,
}
impl DictionaryItemExpr {
    #[inline]
    pub fn dictionary_item_key_expr(&self) -> Option<DictionaryItemKeyExpr> { support::child(&self.syntax) }
    #[inline]
    pub fn dictionary_item_value_expr(&self) -> Option<DictionaryItemValueExpr> { support::child(&self.syntax) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct DictionaryItemKeyExpr {
    pub(crate) syntax: SyntaxNode,
}
impl DictionaryItemKeyExpr {
    #[inline]
    pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct DictionaryItemValueExpr {
    pub(crate) syntax: SyntaxNode,
}
impl DictionaryItemValueExpr {
    #[inline]
    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct IndirectReferenceExpr {
    pub(crate) syntax: SyntaxNode,
}
impl IndirectReferenceExpr {
    #[inline]
    pub fn generation_number(&self) -> Option<Literal> { support::child(&self.syntax) }
    #[inline]
    pub fn object_number(&self) -> Option<Literal> { support::child(&self.syntax) }
    #[inline]
    pub fn R_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![R]) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Literal {
    pub(crate) syntax: SyntaxNode,
}
impl Literal {}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ObjectExpr {
    pub(crate) syntax: SyntaxNode,
}
impl ObjectExpr {
    #[inline]
    pub fn data(&self) -> Option<Expr> { support::child(&self.syntax) }
    #[inline]
    pub fn object_id(&self) -> Option<ObjectId> { support::child(&self.syntax) }
    #[inline]
    pub fn endobj_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![endobj]) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ObjectId {
    pub(crate) syntax: SyntaxNode,
}
impl ObjectId {
    #[inline]
    pub fn generation_number(&self) -> Option<Literal> { support::child(&self.syntax) }
    #[inline]
    pub fn object_number(&self) -> Option<Literal> { support::child(&self.syntax) }
    #[inline]
    pub fn obj_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![obj]) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct SourceFile {
    pub(crate) syntax: SyntaxNode,
}
impl SourceFile {
    #[inline]
    pub fn body(&self) -> Option<Body> { support::child(&self.syntax) }
    #[inline]
    pub fn trailer(&self) -> Option<Trailer> { support::child(&self.syntax) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct StreamExpr {
    pub(crate) syntax: SyntaxNode,
}
impl StreamExpr {
    #[inline]
    pub fn dictionary_expr(&self) -> Option<DictionaryExpr> { support::child(&self.syntax) }
    #[inline]
    pub fn endstream_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![endstream]) }
    #[inline]
    pub fn stream_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![stream]) }
    #[inline]
    pub fn stream_data_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![stream_data]) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Trailer {
    pub(crate) syntax: SyntaxNode,
}
impl Trailer {
    #[inline]
    pub fn dictionary_expr(&self) -> Option<DictionaryExpr> { support::child(&self.syntax) }
    #[inline]
    pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }
    #[inline]
    pub fn startxref_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![startxref]) }
    #[inline]
    pub fn trailer_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![trailer]) }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Expr {
    ArrayExpr(ArrayExpr),
    DictionaryExpr(DictionaryExpr),
    IndirectReferenceExpr(IndirectReferenceExpr),
    Literal(Literal),
    ObjectExpr(ObjectExpr),
}
impl AstNode for ArrayExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        ARRAY_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == ARRAY_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for Body {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        BODY
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == BODY }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for DictionaryExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        DICTIONARY_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == DICTIONARY_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for DictionaryItemExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        DICTIONARY_ITEM_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == DICTIONARY_ITEM_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for DictionaryItemKeyExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        DICTIONARY_ITEM_KEY_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == DICTIONARY_ITEM_KEY_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for DictionaryItemValueExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        DICTIONARY_ITEM_VALUE_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == DICTIONARY_ITEM_VALUE_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for IndirectReferenceExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        INDIRECT_REFERENCE_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == INDIRECT_REFERENCE_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for Literal {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        LITERAL
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for ObjectExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        OBJECT_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == OBJECT_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for ObjectId {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        OBJECT_ID
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == OBJECT_ID }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for SourceFile {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        SOURCE_FILE
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for StreamExpr {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        STREAM_EXPR
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == STREAM_EXPR }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl AstNode for Trailer {
    #[inline]
    fn kind() -> SyntaxKind
    where
        Self: Sized,
    {
        TRAILER
    }
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAILER }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        if Self::can_cast(syntax.kind()) {
            Some(Self { syntax })
        } else {
            None
        }
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}
impl From<ArrayExpr> for Expr {
    #[inline]
    fn from(node: ArrayExpr) -> Expr { Expr::ArrayExpr(node) }
}
impl From<DictionaryExpr> for Expr {
    #[inline]
    fn from(node: DictionaryExpr) -> Expr { Expr::DictionaryExpr(node) }
}
impl From<IndirectReferenceExpr> for Expr {
    #[inline]
    fn from(node: IndirectReferenceExpr) -> Expr { Expr::IndirectReferenceExpr(node) }
}
impl From<Literal> for Expr {
    #[inline]
    fn from(node: Literal) -> Expr { Expr::Literal(node) }
}
impl From<ObjectExpr> for Expr {
    #[inline]
    fn from(node: ObjectExpr) -> Expr { Expr::ObjectExpr(node) }
}
impl AstNode for Expr {
    #[inline]
    fn can_cast(kind: SyntaxKind) -> bool { matches!(kind, ARRAY_EXPR | DICTIONARY_EXPR | INDIRECT_REFERENCE_EXPR | LITERAL | OBJECT_EXPR) }
    #[inline]
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        let res = match syntax.kind() {
            ARRAY_EXPR => Expr::ArrayExpr(ArrayExpr { syntax }),
            DICTIONARY_EXPR => Expr::DictionaryExpr(DictionaryExpr { syntax }),
            INDIRECT_REFERENCE_EXPR => Expr::IndirectReferenceExpr(IndirectReferenceExpr { syntax }),
            LITERAL => Expr::Literal(Literal { syntax }),
            OBJECT_EXPR => Expr::ObjectExpr(ObjectExpr { syntax }),
            _ => return None,
        };
        Some(res)
    }
    #[inline]
    fn syntax(&self) -> &SyntaxNode {
        match self {
            Expr::ArrayExpr(it) => &it.syntax,
            Expr::DictionaryExpr(it) => &it.syntax,
            Expr::IndirectReferenceExpr(it) => &it.syntax,
            Expr::Literal(it) => &it.syntax,
            Expr::ObjectExpr(it) => &it.syntax,
        }
    }
}
impl std::fmt::Display for Expr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for ArrayExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for Body {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for DictionaryExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for DictionaryItemExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for DictionaryItemKeyExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for DictionaryItemValueExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for IndirectReferenceExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for Literal {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for ObjectExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for ObjectId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for SourceFile {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for StreamExpr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
impl std::fmt::Display for Trailer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { std::fmt::Display::fmt(self.syntax(), f) }
}
