[workspace]
members = ["xtask/", "crates/*"]
resolver = "2"

[workspace.package]
rust-version = "1.81"
edition = "2021"
license = "MIT OR Apache-2.0"
authors = ["Victor Pogor"]
repository = "https://github.com/victor-pogor/rust-off"

[profile.dev]
debug = "full" # This is the default.
incremental = true
# opt-level = 0 # 0 is faster, 3 is slower but more optimized.
# overflow-checks = false # Disable integer overflow checks.

[profile.dev.package]
# These speed up local tests.
rowan.opt-level = 3
rustc-hash.opt-level = 3
smol_str.opt-level = 3
text-size.opt-level = 3
serde.opt-level = 3
salsa.opt-level = 3
# This speeds up `cargo xtask dist`.
miniz_oxide.opt-level = 3

[profile.release]
incremental = true
# Set this to 1 or 2 to get more useful backtraces in debugger.
debug = 0

[workspace.dependencies]
# local crates
base-db = { path = "./crates/base-db", version = "0.0.0" }
stdx = { path = "./crates/stdx", version = "0.0.0" }
pdfc-lexer = { path = "./crates/lexer", version = "0.0.0" }
edition = { path = "./crates/edition", version = "0.0.0" }
pdfc-parser = { path = "./crates/parser", version = "0.0.0" }
limit = { path = "./crates/limit", version = "0.0.0" }
rowan = { path = "./crates/rowan", version = "0.16.1" }
vfs = { path = "./crates/vfs", version = "0.0.0" }
paths = { path = "./crates/paths", version = "0.0.0" }

# non-local crates
anyhow = "1.0.97"
xshell = "0.2.7"
itertools = "0.14.0"
either = "1.15.0"
tracing = "0.1.41"
indexmap = { version = "2.8.0", features = ["serde"] }
rustc-hash = "2.1.1"
nohash-hasher = "0.2.0"
crossbeam-channel = "0.5.14"
camino = "1.1.9"

[workspace.lints.rust]
# remember to update RUSTFLAGS in ci.yml if you add something here

elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_extern_crates = "warn"
unused_lifetimes = "warn"
unreachable_pub = "warn"

[workspace.lints.clippy]
## lint groups
complexity = { level = "warn", priority = -1 }
correctness = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
restriction = { level = "allow", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

## allow following lints
too_long_first_doc_paragraph = "allow"
# subjective
single_match = "allow"
# () makes a fine error in most cases
result_unit_err = "allow"
# We don't expose public APIs that matter like this
len_without_is_empty = "allow"
# We have macros that rely on this currently
enum_variant_names = "allow"
# Builder pattern disagrees
new_ret_no_self = "allow"
# Has a bunch of false positives
useless_asref = "allow"
# Has false positives
assigning_clones = "allow"
# Does not work with macros
vec_init_then_push = "allow"
# Our tests have a lot of these
literal_string_with_formatting_args = "allow"
# This lint has been empowered but now also triggers on cases where its invalid to do so
# due to it ignoring move analysis
unnecessary_map_or = "allow"

## Following lints should be tackled at some point
too_many_arguments = "allow"
type_complexity = "allow"
wrong_self_convention = "allow"

## warn at following lints
# CI raises these to deny
dbg_macro = "warn"
todo = "warn"
print_stdout = "warn"
print_stderr = "warn"

rc_buffer = "warn"
str_to_string = "warn"

