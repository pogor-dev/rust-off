[workspace]
members = ["xtask/", "crates/*"]
resolver = "2"

[workspace.package]
rust-version = "1.86.0"
edition = "2024"
license = "MIT OR Apache-2.0"
authors = ["Victor Pogor"]
repository = "https://github.com/victor-pogor/rust-off"

[profile.dev]
debug = "full" # This is the default.
incremental = true
# opt-level = 0 # 0 is faster, 3 is slower but more optimized.
# overflow-checks = false # Disable integer overflow checks.

[profile.dev.package]
# These speed up local tests.
serde.opt-level = 3
rowan.opt-level = 3

[profile.release]
incremental = true
# Set this to 1 or 2 to get more useful backtraces in debugger.
debug = 0
opt-level = 3

# non-local crates

[workspace.dependencies]
# local crates
edition = { path = "./crates/edition", version = "0.0.0" }
lexer = { path = "./crates/lexer", version = "0.0.0" }
limit = { path = "./crates/limit", version = "0.0.0" }
parser = { path = "./crates/parser", version = "0.0.0" }
paths = { path = "./crates/paths", version = "0.0.0" }
rowan = { path = "./crates/rowan", version = "0.16.1" }
stdx = { path = "./crates/stdx", version = "0.0.0" }
vfs = { path = "./crates/vfs", version = "0.0.0" }

# non-local crates
anyhow = "1.0.98"
camino = "1.1.9"
countme = "3.0.1"
drop_bomb = "0.1.5"
either = "1.15.0"
expect-test = "1.5.1"
hashbrown = { version = "0.15.3", features = ["inline-more", "raw-entry"], default-features = false }
indexmap = { version = "2.8.0", features = ["serde"] }
itertools = "0.14.0"
m_lexer = "0.0.4"
proc-macro2 = "1.0.95"
rustc-hash = "2.1.1"
serde = { version = "1.0.219", features = ["derive"] }
quote = "1.0.40"
text-size = "1.1.1"
tracing = "0.1.41"
ungrammar = "1.16.1"
xshell = "0.2.7"
xflags = "0.3.2"

[workspace.lints.rust]
# remember to update RUSTFLAGS in ci.yml if you add something here

elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_extern_crates = "warn"
unused_lifetimes = "warn"
unreachable_pub = "warn"

[workspace.lints.clippy]
# FIXME Remove the tidy test once the lint table is stable

## lint groups
complexity = { level = "warn", priority = -1 }
correctness = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
restriction = { level = "allow", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

## allow following lints
too_long_first_doc_paragraph = "allow"
# subjective
single_match = "allow"
# () makes a fine error in most cases
result_unit_err = "allow"
# We don't expose public APIs that matter like this
len_without_is_empty = "allow"
# We have macros that rely on this currently
enum_variant_names = "allow"
# Builder pattern disagrees
new_ret_no_self = "allow"
# Has a bunch of false positives
useless_asref = "allow"
# Has false positives
assigning_clones = "allow"
# Does not work with macros
vec_init_then_push = "allow"
# Our tests have a lot of these
literal_string_with_formatting_args = "allow"
# This lint has been empowered but now also triggers on cases where its invalid to do so
# due to it ignoring move analysis
unnecessary_map_or = "allow"

## Following lints should be tackled at some point
too_many_arguments = "allow"
type_complexity = "allow"
wrong_self_convention = "allow"

## warn at following lints
# CI raises these to deny
dbg_macro = "warn"
todo = "warn"
print_stdout = "warn"
print_stderr = "warn"

rc_buffer = "warn"
str_to_string = "warn"
